import tkinter as tk
from tkinter import ttk
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk
from fpdf import FPDF
import os
import webbrowser
from datetime import datetime


def generate_pdf(entries, image_path):
    # Create a PDF instance
    pdf = FPDF()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    # Add date and user information
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    user_name = os.getlogin()  # Get the current user name
    pdf.cell(200, 10, txt=f"Generated by: {user_name} on {current_time}", ln=True, align="C")
    pdf.ln(10)

    # Add content to the PDF
    pdf.cell(200, 10, txt="Checklist Form", ln=True, align="C")
    pdf.ln(10)

    for label, entry in entries.items():
        pdf.cell(0, 10, txt=f"{label} {entry.get()}", ln=True)

    # Add image to the PDF if provided
    if image_path:
        pdf.ln(10)
        pdf.cell(0, 10, txt="Attached Label Image:", ln=True)
        pdf.image(image_path, x=10, y=pdf.get_y() + 10, w=100)

    # Save the PDF
    pdf_file = "checklist.pdf"
    pdf.output(pdf_file)
    print(f"PDF Generated: {pdf_file}")

    # Open the PDF file
    if os.name == 'nt':  # For Windows
        os.startfile(pdf_file)
    else:  # For MacOS and Linux
        webbrowser.open(pdf_file)


def upload_image(label):
    # Open file dialog to select an image
    file_path = filedialog.askopenfilename(
        filetypes=[("Image Files", "*.png;*.jpg;*.jpeg;*.bmp;*.gif")]
    )
    if file_path:
        label.config(text=file_path)


def validate_upc(upc, root):
    if len(upc) != 12 or not upc.isdigit():
        messagebox.showerror("Invalid UPC", "The UPC must be exactly 12 digits.")
        return False
    root.destroy()  # Close the validation window
    create_checklist_app()  # Open the main application
    return True


def submit_upc(upc_entry, root):
    upc = upc_entry.get()
    if validate_upc(upc, root):
        root.destroy()  # Close the validation window


def create_validation_window():
    # Create the validation window as the first window
    root = tk.Tk()
    root.title("UPC Validator")
    root.geometry("400x200")

    instruction_label = tk.Label(root, text="Enter a 12-digit UPC:", font=("Arial", 12))
    instruction_label.pack(pady=10)

    upc_entry = tk.Entry(root, font=("Arial", 14), width=20)
    upc_entry.pack(pady=10)

    submit_button = tk.Button(
        root,
        text="Submit",
        font=("Arial", 12),
        command=lambda: submit_upc(upc_entry, root)
    )
    submit_button.pack(pady=20)

    root.mainloop()


def create_checklist_app():
    # Create the main application window
    root = tk.Tk()
    root.title("Checklist Application")
    root.geometry("850x1100")  # 8.5" x 11" screen in pixels (approx 96 DPI)

    # Create a frame for the checklist content
    frame = ttk.Frame(root, padding="10")
    frame.grid(row=0, column=0, sticky="NSEW")

    # Define labels and entry fields for the checklist
    labels = [
        "Customer:", "Part #:", "Job Ticket #:", "Customer PO #:", "Inlay Type:",
        "START:", "STOP:", "LPR:", "UPC:", "Item:", "ROLLS:"
    ]

    # Store entry fields in a dictionary
    entries = {}

    # Create labels and corresponding entry fields
    for i, label in enumerate(labels):
        ttk.Label(frame, text=label, anchor="w", width=20).grid(row=i, column=0, pady=5, sticky="W")
        entry = ttk.Entry(frame, width=50)
        entry.grid(row=i, column=1, pady=5, sticky="W")
        entries[label] = entry

    # Add a label and button for uploading an image
    image_label = ttk.Label(frame, text="No image selected", width=50, anchor="w")
    image_label.grid(row=len(labels), column=0, columnspan=2, pady=5, sticky="W")
    ttk.Button(frame, text="Upload Image", command=lambda: upload_image(image_label)).grid(row=len(labels)+1, column=0, pady=5, sticky="W")

    # Add a submit button to generate the PDF
    submit_button = ttk.Button(
        frame,
        text="Generate PDF",
        command=lambda: validate_and_generate_pdf(entries, image_label.cget("text"))
    )
    submit_button.grid(row=len(labels)+2, column=1, pady=20, sticky="E")

    root.mainloop()


if __name__ == "__main__":
    create_validation_window()
